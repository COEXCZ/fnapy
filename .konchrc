# -*- coding: utf-8 -*-
# vi: set ft=python :

# Python
import os
import datetime

# Third-party
import konch
import fntools
import requests

# Project
from fnapy.fnapy_manager import FnapyManager
from fnapy.connection import FnapyConnection


# Creation of a FnapyManager instance
partner_id = os.getenv('FNAC_PARTNER_ID')
shop_id = os.getenv('FNAC_SHOP_ID')
key = os.getenv('FNAC_KEY')
connection = FnapyConnection(partner_id, shop_id, key)
manager = FnapyManager(connection)


# Useful functions
def create_response_dicts(objects):
    """Create the dictionary of the responses"""
    names = ('auth', 'offers_update', 'batch_query', 'batch_status', 'offers_query',
             'orders_query', 'orders_update', 'pricing_query',
             'carriers_query', 'client_order_comments_query',
             'client_order_comments_update', 'messages_query',
             'messages_update', 'incidents_query', 'incidents_update',
             'shop_invoices_query')
    for name in names:
        response_name = name + '_response'
        dict_name = name + '_dict'
        if response_name in objects:
            var_response = objects[response_name]
            objects.update({dict_name: var_response.dict[response_name]})


# Available options:
#   'context', 'banner', 'shell', 'prompt', 'output',
#   'context_format', 'ipy_extensions', 'ipy_autoreload',
#   'ipy_colors', 'ipy_highlighting_style'
konch.config({
    'context': {
        'speak': konch.speak,
        'datetime': datetime.datetime,
        'timedelta': datetime.timedelta,
        'valueof': fntools.valueof,
        'requests': requests,
        'FnapyManager': FnapyManager,
        'FnapyConnection': FnapyConnection,
        'manager': manager,
        'create_response_dicts': create_response_dicts,
    },
    'ipy_colors': 'linux',
    'ipy_extensions': [
        'autoreload',
    ],
    'banner': 'Welcome to fnapy',
    'shell': 'ipython',
})

def setup():
    pass

def teardown():
    pass
